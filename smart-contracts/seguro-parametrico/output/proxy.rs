// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct SeguroParametricoProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for SeguroParametricoProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = SeguroParametricoProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        SeguroParametricoProxyMethods { wrapped_tx: tx }
    }
}

pub struct SeguroParametricoProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> SeguroParametricoProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    /// Inicializa o contrato. 
    pub fn init(
        self,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> SeguroParametricoProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn upgrade(
        self,
    ) -> TxTypedUpgrade<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_upgrade()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> SeguroParametricoProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    /// Registra uma nova apólice de seguro. 
    ///  
    /// Parâmetros: 
    /// - `policy_id`: Identificador único da apólice. 
    /// - `contratante`: Endereço da carteira do contratante (destinatário do pagamento). 
    /// - `local`: Localização (nome ou coordenadas). 
    /// - `limite_chuva`: Limite de precipitação (em mm) que define o gatilho. 
    /// - `duracao_dias`: Período de observação (em dias). 
    /// - `valor_indemnizacao`: Valor da indenização (em EGLD). 
    /// - `expiration`: Momento de expiração da apólice (timestamp ou número de bloco). 
    pub fn register_policy<
        Arg0: ProxyArg<BigUint<Env::Api>>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
        Arg2: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg3: ProxyArg<u64>,
        Arg4: ProxyArg<u64>,
        Arg5: ProxyArg<BigUint<Env::Api>>,
        Arg6: ProxyArg<u64>,
    >(
        self,
        policy_id: Arg0,
        contratante: Arg1,
        local: Arg2,
        limite_chuva: Arg3,
        duracao_dias: Arg4,
        valor_indemnizacao: Arg5,
        expiration: Arg6,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("registerPolicy")
            .argument(&policy_id)
            .argument(&contratante)
            .argument(&local)
            .argument(&limite_chuva)
            .argument(&duracao_dias)
            .argument(&valor_indemnizacao)
            .argument(&expiration)
            .original_result()
    }

    /// Aciona o pagamento do seguro caso as condições definidas sejam atendidas. 
    ///  
    /// Parâmetros: 
    /// - `policy_id`: Identificador da apólice. 
    /// - `chuva_acumulada`: Valor acumulado de chuva (em mm) medido pelo oráculo. 
    /// - `timestamp`: Momento da medição (usado para validar a expiração). 
    ///  
    /// Condições: 
    /// - A apólice deve estar ativa. 
    /// - O timestamp não pode ultrapassar a expiração. 
    /// - A precipitação acumulada deve ser menor que o limite definido. 
    ///  
    /// Ação: 
    /// - Transfere o valor da indenização em EGLD para o contratante. 
    /// - Atualiza a apólice para inativa e registra o timestamp da atualização. 
    pub fn trigger_payment<
        Arg0: ProxyArg<BigUint<Env::Api>>,
        Arg1: ProxyArg<u64>,
        Arg2: ProxyArg<u64>,
    >(
        self,
        policy_id: Arg0,
        chuva_acumulada: Arg1,
        timestamp: Arg2,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("triggerPayment")
            .argument(&policy_id)
            .argument(&chuva_acumulada)
            .argument(&timestamp)
            .original_result()
    }

    /// Consulta os dados da apólice com o ID fornecido. 
    pub fn get_policy<
        Arg0: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        policy_id: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, Option<Policy<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getPolicy")
            .argument(&policy_id)
            .original_result()
    }
}

#[type_abi]
#[derive(TopEncode, TopDecode, NestedEncode, NestedDecode, Clone, PartialEq, Debug)]
pub struct Policy<Api>
where
    Api: ManagedTypeApi,
{
    pub contratante: ManagedAddress<Api>,
    pub local: ManagedBuffer<Api>,
    pub limite_chuva: u64,
    pub duracao_dias: u64,
    pub valor_indemnizacao: BigUint<Api>,
    pub ativo: bool,
    pub expiration: u64,
    pub ultima_atualizacao: Option<u64>,
}
